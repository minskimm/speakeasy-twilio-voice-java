/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class UpdateByocTrunkUpdateByocTrunkRequest {

    /**
     * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    private Optional<String> friendlyName;

    /**
     * The URL we should call when the BYOC Trunk receives a call.
     */
    @SpeakeasyMetadata("form:name=VoiceUrl")
    private Optional<String> voiceUrl;

    /**
     * The HTTP method we should use to call `voice_url`
     */
    @SpeakeasyMetadata("form:name=VoiceMethod")
    private Optional<? extends UpdateByocTrunkVoiceMethod> voiceMethod;

    /**
     * The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
     */
    @SpeakeasyMetadata("form:name=VoiceFallbackUrl")
    private Optional<String> voiceFallbackUrl;

    /**
     * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
     */
    @SpeakeasyMetadata("form:name=VoiceFallbackMethod")
    private Optional<? extends UpdateByocTrunkVoiceFallbackMethod> voiceFallbackMethod;

    /**
     * The URL that we should call to pass status parameters (such as call ended) to your application.
     */
    @SpeakeasyMetadata("form:name=StatusCallbackUrl")
    private Optional<String> statusCallbackUrl;

    /**
     * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
     */
    @SpeakeasyMetadata("form:name=StatusCallbackMethod")
    private Optional<? extends UpdateByocTrunkStatusCallbackMethod> statusCallbackMethod;

    /**
     * Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
     */
    @SpeakeasyMetadata("form:name=CnamLookupEnabled")
    private Optional<Boolean> cnamLookupEnabled;

    /**
     * The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
     */
    @SpeakeasyMetadata("form:name=ConnectionPolicySid")
    private Optional<String> connectionPolicySid;

    /**
     * The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to "call back" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to "sip.twilio.com".
     */
    @SpeakeasyMetadata("form:name=FromDomainSid")
    private Optional<String> fromDomainSid;

    @JsonCreator
    public UpdateByocTrunkUpdateByocTrunkRequest(
            Optional<String> friendlyName,
            Optional<String> voiceUrl,
            Optional<? extends UpdateByocTrunkVoiceMethod> voiceMethod,
            Optional<String> voiceFallbackUrl,
            Optional<? extends UpdateByocTrunkVoiceFallbackMethod> voiceFallbackMethod,
            Optional<String> statusCallbackUrl,
            Optional<? extends UpdateByocTrunkStatusCallbackMethod> statusCallbackMethod,
            Optional<Boolean> cnamLookupEnabled,
            Optional<String> connectionPolicySid,
            Optional<String> fromDomainSid) {
        Utils.checkNotNull(friendlyName, "friendlyName");
        Utils.checkNotNull(voiceUrl, "voiceUrl");
        Utils.checkNotNull(voiceMethod, "voiceMethod");
        Utils.checkNotNull(voiceFallbackUrl, "voiceFallbackUrl");
        Utils.checkNotNull(voiceFallbackMethod, "voiceFallbackMethod");
        Utils.checkNotNull(statusCallbackUrl, "statusCallbackUrl");
        Utils.checkNotNull(statusCallbackMethod, "statusCallbackMethod");
        Utils.checkNotNull(cnamLookupEnabled, "cnamLookupEnabled");
        Utils.checkNotNull(connectionPolicySid, "connectionPolicySid");
        Utils.checkNotNull(fromDomainSid, "fromDomainSid");
        this.friendlyName = friendlyName;
        this.voiceUrl = voiceUrl;
        this.voiceMethod = voiceMethod;
        this.voiceFallbackUrl = voiceFallbackUrl;
        this.voiceFallbackMethod = voiceFallbackMethod;
        this.statusCallbackUrl = statusCallbackUrl;
        this.statusCallbackMethod = statusCallbackMethod;
        this.cnamLookupEnabled = cnamLookupEnabled;
        this.connectionPolicySid = connectionPolicySid;
        this.fromDomainSid = fromDomainSid;
    }
    
    public UpdateByocTrunkUpdateByocTrunkRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
     */
    @JsonIgnore
    public Optional<String> friendlyName() {
        return friendlyName;
    }

    /**
     * The URL we should call when the BYOC Trunk receives a call.
     */
    @JsonIgnore
    public Optional<String> voiceUrl() {
        return voiceUrl;
    }

    /**
     * The HTTP method we should use to call `voice_url`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateByocTrunkVoiceMethod> voiceMethod() {
        return (Optional<UpdateByocTrunkVoiceMethod>) voiceMethod;
    }

    /**
     * The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
     */
    @JsonIgnore
    public Optional<String> voiceFallbackUrl() {
        return voiceFallbackUrl;
    }

    /**
     * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateByocTrunkVoiceFallbackMethod> voiceFallbackMethod() {
        return (Optional<UpdateByocTrunkVoiceFallbackMethod>) voiceFallbackMethod;
    }

    /**
     * The URL that we should call to pass status parameters (such as call ended) to your application.
     */
    @JsonIgnore
    public Optional<String> statusCallbackUrl() {
        return statusCallbackUrl;
    }

    /**
     * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateByocTrunkStatusCallbackMethod> statusCallbackMethod() {
        return (Optional<UpdateByocTrunkStatusCallbackMethod>) statusCallbackMethod;
    }

    /**
     * Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
     */
    @JsonIgnore
    public Optional<Boolean> cnamLookupEnabled() {
        return cnamLookupEnabled;
    }

    /**
     * The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
     */
    @JsonIgnore
    public Optional<String> connectionPolicySid() {
        return connectionPolicySid;
    }

    /**
     * The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to "call back" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to "sip.twilio.com".
     */
    @JsonIgnore
    public Optional<String> fromDomainSid() {
        return fromDomainSid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withFriendlyName(String friendlyName) {
        Utils.checkNotNull(friendlyName, "friendlyName");
        this.friendlyName = Optional.ofNullable(friendlyName);
        return this;
    }

    /**
     * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withFriendlyName(Optional<String> friendlyName) {
        Utils.checkNotNull(friendlyName, "friendlyName");
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * The URL we should call when the BYOC Trunk receives a call.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withVoiceUrl(String voiceUrl) {
        Utils.checkNotNull(voiceUrl, "voiceUrl");
        this.voiceUrl = Optional.ofNullable(voiceUrl);
        return this;
    }

    /**
     * The URL we should call when the BYOC Trunk receives a call.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withVoiceUrl(Optional<String> voiceUrl) {
        Utils.checkNotNull(voiceUrl, "voiceUrl");
        this.voiceUrl = voiceUrl;
        return this;
    }

    /**
     * The HTTP method we should use to call `voice_url`
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withVoiceMethod(UpdateByocTrunkVoiceMethod voiceMethod) {
        Utils.checkNotNull(voiceMethod, "voiceMethod");
        this.voiceMethod = Optional.ofNullable(voiceMethod);
        return this;
    }

    /**
     * The HTTP method we should use to call `voice_url`
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withVoiceMethod(Optional<? extends UpdateByocTrunkVoiceMethod> voiceMethod) {
        Utils.checkNotNull(voiceMethod, "voiceMethod");
        this.voiceMethod = voiceMethod;
        return this;
    }

    /**
     * The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withVoiceFallbackUrl(String voiceFallbackUrl) {
        Utils.checkNotNull(voiceFallbackUrl, "voiceFallbackUrl");
        this.voiceFallbackUrl = Optional.ofNullable(voiceFallbackUrl);
        return this;
    }

    /**
     * The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withVoiceFallbackUrl(Optional<String> voiceFallbackUrl) {
        Utils.checkNotNull(voiceFallbackUrl, "voiceFallbackUrl");
        this.voiceFallbackUrl = voiceFallbackUrl;
        return this;
    }

    /**
     * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withVoiceFallbackMethod(UpdateByocTrunkVoiceFallbackMethod voiceFallbackMethod) {
        Utils.checkNotNull(voiceFallbackMethod, "voiceFallbackMethod");
        this.voiceFallbackMethod = Optional.ofNullable(voiceFallbackMethod);
        return this;
    }

    /**
     * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withVoiceFallbackMethod(Optional<? extends UpdateByocTrunkVoiceFallbackMethod> voiceFallbackMethod) {
        Utils.checkNotNull(voiceFallbackMethod, "voiceFallbackMethod");
        this.voiceFallbackMethod = voiceFallbackMethod;
        return this;
    }

    /**
     * The URL that we should call to pass status parameters (such as call ended) to your application.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withStatusCallbackUrl(String statusCallbackUrl) {
        Utils.checkNotNull(statusCallbackUrl, "statusCallbackUrl");
        this.statusCallbackUrl = Optional.ofNullable(statusCallbackUrl);
        return this;
    }

    /**
     * The URL that we should call to pass status parameters (such as call ended) to your application.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withStatusCallbackUrl(Optional<String> statusCallbackUrl) {
        Utils.checkNotNull(statusCallbackUrl, "statusCallbackUrl");
        this.statusCallbackUrl = statusCallbackUrl;
        return this;
    }

    /**
     * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withStatusCallbackMethod(UpdateByocTrunkStatusCallbackMethod statusCallbackMethod) {
        Utils.checkNotNull(statusCallbackMethod, "statusCallbackMethod");
        this.statusCallbackMethod = Optional.ofNullable(statusCallbackMethod);
        return this;
    }

    /**
     * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withStatusCallbackMethod(Optional<? extends UpdateByocTrunkStatusCallbackMethod> statusCallbackMethod) {
        Utils.checkNotNull(statusCallbackMethod, "statusCallbackMethod");
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }

    /**
     * Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withCnamLookupEnabled(boolean cnamLookupEnabled) {
        Utils.checkNotNull(cnamLookupEnabled, "cnamLookupEnabled");
        this.cnamLookupEnabled = Optional.ofNullable(cnamLookupEnabled);
        return this;
    }

    /**
     * Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withCnamLookupEnabled(Optional<Boolean> cnamLookupEnabled) {
        Utils.checkNotNull(cnamLookupEnabled, "cnamLookupEnabled");
        this.cnamLookupEnabled = cnamLookupEnabled;
        return this;
    }

    /**
     * The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withConnectionPolicySid(String connectionPolicySid) {
        Utils.checkNotNull(connectionPolicySid, "connectionPolicySid");
        this.connectionPolicySid = Optional.ofNullable(connectionPolicySid);
        return this;
    }

    /**
     * The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withConnectionPolicySid(Optional<String> connectionPolicySid) {
        Utils.checkNotNull(connectionPolicySid, "connectionPolicySid");
        this.connectionPolicySid = connectionPolicySid;
        return this;
    }

    /**
     * The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to "call back" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to "sip.twilio.com".
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withFromDomainSid(String fromDomainSid) {
        Utils.checkNotNull(fromDomainSid, "fromDomainSid");
        this.fromDomainSid = Optional.ofNullable(fromDomainSid);
        return this;
    }

    /**
     * The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to "call back" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to "sip.twilio.com".
     */
    public UpdateByocTrunkUpdateByocTrunkRequest withFromDomainSid(Optional<String> fromDomainSid) {
        Utils.checkNotNull(fromDomainSid, "fromDomainSid");
        this.fromDomainSid = fromDomainSid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateByocTrunkUpdateByocTrunkRequest other = (UpdateByocTrunkUpdateByocTrunkRequest) o;
        return 
            Objects.deepEquals(this.friendlyName, other.friendlyName) &&
            Objects.deepEquals(this.voiceUrl, other.voiceUrl) &&
            Objects.deepEquals(this.voiceMethod, other.voiceMethod) &&
            Objects.deepEquals(this.voiceFallbackUrl, other.voiceFallbackUrl) &&
            Objects.deepEquals(this.voiceFallbackMethod, other.voiceFallbackMethod) &&
            Objects.deepEquals(this.statusCallbackUrl, other.statusCallbackUrl) &&
            Objects.deepEquals(this.statusCallbackMethod, other.statusCallbackMethod) &&
            Objects.deepEquals(this.cnamLookupEnabled, other.cnamLookupEnabled) &&
            Objects.deepEquals(this.connectionPolicySid, other.connectionPolicySid) &&
            Objects.deepEquals(this.fromDomainSid, other.fromDomainSid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            friendlyName,
            voiceUrl,
            voiceMethod,
            voiceFallbackUrl,
            voiceFallbackMethod,
            statusCallbackUrl,
            statusCallbackMethod,
            cnamLookupEnabled,
            connectionPolicySid,
            fromDomainSid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateByocTrunkUpdateByocTrunkRequest.class,
                "friendlyName", friendlyName,
                "voiceUrl", voiceUrl,
                "voiceMethod", voiceMethod,
                "voiceFallbackUrl", voiceFallbackUrl,
                "voiceFallbackMethod", voiceFallbackMethod,
                "statusCallbackUrl", statusCallbackUrl,
                "statusCallbackMethod", statusCallbackMethod,
                "cnamLookupEnabled", cnamLookupEnabled,
                "connectionPolicySid", connectionPolicySid,
                "fromDomainSid", fromDomainSid);
    }
    
    public final static class Builder {
 
        private Optional<String> friendlyName = Optional.empty();
 
        private Optional<String> voiceUrl = Optional.empty();
 
        private Optional<? extends UpdateByocTrunkVoiceMethod> voiceMethod = Optional.empty();
 
        private Optional<String> voiceFallbackUrl = Optional.empty();
 
        private Optional<? extends UpdateByocTrunkVoiceFallbackMethod> voiceFallbackMethod = Optional.empty();
 
        private Optional<String> statusCallbackUrl = Optional.empty();
 
        private Optional<? extends UpdateByocTrunkStatusCallbackMethod> statusCallbackMethod = Optional.empty();
 
        private Optional<Boolean> cnamLookupEnabled = Optional.empty();
 
        private Optional<String> connectionPolicySid = Optional.empty();
 
        private Optional<String> fromDomainSid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
         */
        public Builder friendlyName(String friendlyName) {
            Utils.checkNotNull(friendlyName, "friendlyName");
            this.friendlyName = Optional.ofNullable(friendlyName);
            return this;
        }

        /**
         * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
         */
        public Builder friendlyName(Optional<String> friendlyName) {
            Utils.checkNotNull(friendlyName, "friendlyName");
            this.friendlyName = friendlyName;
            return this;
        }

        /**
         * The URL we should call when the BYOC Trunk receives a call.
         */
        public Builder voiceUrl(String voiceUrl) {
            Utils.checkNotNull(voiceUrl, "voiceUrl");
            this.voiceUrl = Optional.ofNullable(voiceUrl);
            return this;
        }

        /**
         * The URL we should call when the BYOC Trunk receives a call.
         */
        public Builder voiceUrl(Optional<String> voiceUrl) {
            Utils.checkNotNull(voiceUrl, "voiceUrl");
            this.voiceUrl = voiceUrl;
            return this;
        }

        /**
         * The HTTP method we should use to call `voice_url`
         */
        public Builder voiceMethod(UpdateByocTrunkVoiceMethod voiceMethod) {
            Utils.checkNotNull(voiceMethod, "voiceMethod");
            this.voiceMethod = Optional.ofNullable(voiceMethod);
            return this;
        }

        /**
         * The HTTP method we should use to call `voice_url`
         */
        public Builder voiceMethod(Optional<? extends UpdateByocTrunkVoiceMethod> voiceMethod) {
            Utils.checkNotNull(voiceMethod, "voiceMethod");
            this.voiceMethod = voiceMethod;
            return this;
        }

        /**
         * The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
         */
        public Builder voiceFallbackUrl(String voiceFallbackUrl) {
            Utils.checkNotNull(voiceFallbackUrl, "voiceFallbackUrl");
            this.voiceFallbackUrl = Optional.ofNullable(voiceFallbackUrl);
            return this;
        }

        /**
         * The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
         */
        public Builder voiceFallbackUrl(Optional<String> voiceFallbackUrl) {
            Utils.checkNotNull(voiceFallbackUrl, "voiceFallbackUrl");
            this.voiceFallbackUrl = voiceFallbackUrl;
            return this;
        }

        /**
         * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
         */
        public Builder voiceFallbackMethod(UpdateByocTrunkVoiceFallbackMethod voiceFallbackMethod) {
            Utils.checkNotNull(voiceFallbackMethod, "voiceFallbackMethod");
            this.voiceFallbackMethod = Optional.ofNullable(voiceFallbackMethod);
            return this;
        }

        /**
         * The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
         */
        public Builder voiceFallbackMethod(Optional<? extends UpdateByocTrunkVoiceFallbackMethod> voiceFallbackMethod) {
            Utils.checkNotNull(voiceFallbackMethod, "voiceFallbackMethod");
            this.voiceFallbackMethod = voiceFallbackMethod;
            return this;
        }

        /**
         * The URL that we should call to pass status parameters (such as call ended) to your application.
         */
        public Builder statusCallbackUrl(String statusCallbackUrl) {
            Utils.checkNotNull(statusCallbackUrl, "statusCallbackUrl");
            this.statusCallbackUrl = Optional.ofNullable(statusCallbackUrl);
            return this;
        }

        /**
         * The URL that we should call to pass status parameters (such as call ended) to your application.
         */
        public Builder statusCallbackUrl(Optional<String> statusCallbackUrl) {
            Utils.checkNotNull(statusCallbackUrl, "statusCallbackUrl");
            this.statusCallbackUrl = statusCallbackUrl;
            return this;
        }

        /**
         * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
         */
        public Builder statusCallbackMethod(UpdateByocTrunkStatusCallbackMethod statusCallbackMethod) {
            Utils.checkNotNull(statusCallbackMethod, "statusCallbackMethod");
            this.statusCallbackMethod = Optional.ofNullable(statusCallbackMethod);
            return this;
        }

        /**
         * The HTTP method we should use to call `status_callback_url`. Can be: `GET` or `POST`.
         */
        public Builder statusCallbackMethod(Optional<? extends UpdateByocTrunkStatusCallbackMethod> statusCallbackMethod) {
            Utils.checkNotNull(statusCallbackMethod, "statusCallbackMethod");
            this.statusCallbackMethod = statusCallbackMethod;
            return this;
        }

        /**
         * Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
         */
        public Builder cnamLookupEnabled(boolean cnamLookupEnabled) {
            Utils.checkNotNull(cnamLookupEnabled, "cnamLookupEnabled");
            this.cnamLookupEnabled = Optional.ofNullable(cnamLookupEnabled);
            return this;
        }

        /**
         * Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
         */
        public Builder cnamLookupEnabled(Optional<Boolean> cnamLookupEnabled) {
            Utils.checkNotNull(cnamLookupEnabled, "cnamLookupEnabled");
            this.cnamLookupEnabled = cnamLookupEnabled;
            return this;
        }

        /**
         * The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
         */
        public Builder connectionPolicySid(String connectionPolicySid) {
            Utils.checkNotNull(connectionPolicySid, "connectionPolicySid");
            this.connectionPolicySid = Optional.ofNullable(connectionPolicySid);
            return this;
        }

        /**
         * The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure.
         */
        public Builder connectionPolicySid(Optional<String> connectionPolicySid) {
            Utils.checkNotNull(connectionPolicySid, "connectionPolicySid");
            this.connectionPolicySid = connectionPolicySid;
            return this;
        }

        /**
         * The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to "call back" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to "sip.twilio.com".
         */
        public Builder fromDomainSid(String fromDomainSid) {
            Utils.checkNotNull(fromDomainSid, "fromDomainSid");
            this.fromDomainSid = Optional.ofNullable(fromDomainSid);
            return this;
        }

        /**
         * The SID of the SIP Domain that should be used in the `From` header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to "call back" an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to "sip.twilio.com".
         */
        public Builder fromDomainSid(Optional<String> fromDomainSid) {
            Utils.checkNotNull(fromDomainSid, "fromDomainSid");
            this.fromDomainSid = fromDomainSid;
            return this;
        }
        
        public UpdateByocTrunkUpdateByocTrunkRequest build() {
            return new UpdateByocTrunkUpdateByocTrunkRequest(
                friendlyName,
                voiceUrl,
                voiceMethod,
                voiceFallbackUrl,
                voiceFallbackMethod,
                statusCallbackUrl,
                statusCallbackMethod,
                cnamLookupEnabled,
                connectionPolicySid,
                fromDomainSid);
        }
    }
}

