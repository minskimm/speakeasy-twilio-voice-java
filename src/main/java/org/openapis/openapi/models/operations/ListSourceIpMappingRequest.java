/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ListSourceIpMappingRequest {

    /**
     * How many resources to return in each list page. The default is 50, and the maximum is 1000.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=PageSize")
    private Optional<Long> pageSize;

    /**
     * The page index. This value is simply for client state.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Page")
    private Optional<Long> page;

    /**
     * The page token. This is provided by the API.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=PageToken")
    private Optional<String> pageToken;

    @JsonCreator
    public ListSourceIpMappingRequest(
            Optional<Long> pageSize,
            Optional<Long> page,
            Optional<String> pageToken) {
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageToken, "pageToken");
        this.pageSize = pageSize;
        this.page = page;
        this.pageToken = pageToken;
    }
    
    public ListSourceIpMappingRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * How many resources to return in each list page. The default is 50, and the maximum is 1000.
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * The page index. This value is simply for client state.
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * The page token. This is provided by the API.
     */
    @JsonIgnore
    public Optional<String> pageToken() {
        return pageToken;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * How many resources to return in each list page. The default is 50, and the maximum is 1000.
     */
    public ListSourceIpMappingRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * How many resources to return in each list page. The default is 50, and the maximum is 1000.
     */
    public ListSourceIpMappingRequest withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * The page index. This value is simply for client state.
     */
    public ListSourceIpMappingRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * The page index. This value is simply for client state.
     */
    public ListSourceIpMappingRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * The page token. This is provided by the API.
     */
    public ListSourceIpMappingRequest withPageToken(String pageToken) {
        Utils.checkNotNull(pageToken, "pageToken");
        this.pageToken = Optional.ofNullable(pageToken);
        return this;
    }

    /**
     * The page token. This is provided by the API.
     */
    public ListSourceIpMappingRequest withPageToken(Optional<String> pageToken) {
        Utils.checkNotNull(pageToken, "pageToken");
        this.pageToken = pageToken;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSourceIpMappingRequest other = (ListSourceIpMappingRequest) o;
        return 
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pageToken, other.pageToken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            pageSize,
            page,
            pageToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSourceIpMappingRequest.class,
                "pageSize", pageSize,
                "page", page,
                "pageToken", pageToken);
    }
    
    public final static class Builder {
 
        private Optional<Long> pageSize = Optional.empty();
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<String> pageToken = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * How many resources to return in each list page. The default is 50, and the maximum is 1000.
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * How many resources to return in each list page. The default is 50, and the maximum is 1000.
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * The page index. This value is simply for client state.
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * The page index. This value is simply for client state.
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * The page token. This is provided by the API.
         */
        public Builder pageToken(String pageToken) {
            Utils.checkNotNull(pageToken, "pageToken");
            this.pageToken = Optional.ofNullable(pageToken);
            return this;
        }

        /**
         * The page token. This is provided by the API.
         */
        public Builder pageToken(Optional<String> pageToken) {
            Utils.checkNotNull(pageToken, "pageToken");
            this.pageToken = pageToken;
            return this;
        }
        
        public ListSourceIpMappingRequest build() {
            return new ListSourceIpMappingRequest(
                pageSize,
                page,
                pageToken);
        }
    }
}

