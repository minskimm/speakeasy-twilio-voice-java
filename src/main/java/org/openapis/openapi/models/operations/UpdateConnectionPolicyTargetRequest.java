/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class UpdateConnectionPolicyTargetRequest {

    /**
     * The SID of the Connection Policy that owns the Target.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=ConnectionPolicySid")
    private String connectionPolicySid;

    /**
     * The unique string that we created to identify the Target resource to update.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=Sid")
    private String sid;

    @SpeakeasyMetadata("request:mediaType=application/x-www-form-urlencoded")
    private Optional<? extends UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest> requestBody;

    @JsonCreator
    public UpdateConnectionPolicyTargetRequest(
            String connectionPolicySid,
            String sid,
            Optional<? extends UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest> requestBody) {
        Utils.checkNotNull(connectionPolicySid, "connectionPolicySid");
        Utils.checkNotNull(sid, "sid");
        Utils.checkNotNull(requestBody, "requestBody");
        this.connectionPolicySid = connectionPolicySid;
        this.sid = sid;
        this.requestBody = requestBody;
    }
    
    public UpdateConnectionPolicyTargetRequest(
            String connectionPolicySid,
            String sid) {
        this(connectionPolicySid, sid, Optional.empty());
    }

    /**
     * The SID of the Connection Policy that owns the Target.
     */
    @JsonIgnore
    public String connectionPolicySid() {
        return connectionPolicySid;
    }

    /**
     * The unique string that we created to identify the Target resource to update.
     */
    @JsonIgnore
    public String sid() {
        return sid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest> requestBody() {
        return (Optional<UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest>) requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The SID of the Connection Policy that owns the Target.
     */
    public UpdateConnectionPolicyTargetRequest withConnectionPolicySid(String connectionPolicySid) {
        Utils.checkNotNull(connectionPolicySid, "connectionPolicySid");
        this.connectionPolicySid = connectionPolicySid;
        return this;
    }

    /**
     * The unique string that we created to identify the Target resource to update.
     */
    public UpdateConnectionPolicyTargetRequest withSid(String sid) {
        Utils.checkNotNull(sid, "sid");
        this.sid = sid;
        return this;
    }

    public UpdateConnectionPolicyTargetRequest withRequestBody(UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public UpdateConnectionPolicyTargetRequest withRequestBody(Optional<? extends UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateConnectionPolicyTargetRequest other = (UpdateConnectionPolicyTargetRequest) o;
        return 
            Objects.deepEquals(this.connectionPolicySid, other.connectionPolicySid) &&
            Objects.deepEquals(this.sid, other.sid) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connectionPolicySid,
            sid,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateConnectionPolicyTargetRequest.class,
                "connectionPolicySid", connectionPolicySid,
                "sid", sid,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String connectionPolicySid;
 
        private String sid;
 
        private Optional<? extends UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest> requestBody = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The SID of the Connection Policy that owns the Target.
         */
        public Builder connectionPolicySid(String connectionPolicySid) {
            Utils.checkNotNull(connectionPolicySid, "connectionPolicySid");
            this.connectionPolicySid = connectionPolicySid;
            return this;
        }

        /**
         * The unique string that we created to identify the Target resource to update.
         */
        public Builder sid(String sid) {
            Utils.checkNotNull(sid, "sid");
            this.sid = sid;
            return this;
        }

        public Builder requestBody(UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends UpdateConnectionPolicyTargetUpdateConnectionPolicyTargetRequest> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public UpdateConnectionPolicyTargetRequest build() {
            return new UpdateConnectionPolicyTargetRequest(
                connectionPolicySid,
                sid,
                requestBody);
        }
    }
}

