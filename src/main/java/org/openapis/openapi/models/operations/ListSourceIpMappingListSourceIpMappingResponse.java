/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.components.VoiceV1SourceIpMapping;
import org.openapis.openapi.utils.Utils;

/**
 * ListSourceIpMappingListSourceIpMappingResponse - OK
 */

public class ListSourceIpMappingListSourceIpMappingResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_ip_mappings")
    private Optional<? extends List<VoiceV1SourceIpMapping>> sourceIpMappings;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    private Optional<? extends ListSourceIpMappingMeta> meta;

    @JsonCreator
    public ListSourceIpMappingListSourceIpMappingResponse(
            @JsonProperty("source_ip_mappings") Optional<? extends List<VoiceV1SourceIpMapping>> sourceIpMappings,
            @JsonProperty("meta") Optional<? extends ListSourceIpMappingMeta> meta) {
        Utils.checkNotNull(sourceIpMappings, "sourceIpMappings");
        Utils.checkNotNull(meta, "meta");
        this.sourceIpMappings = sourceIpMappings;
        this.meta = meta;
    }
    
    public ListSourceIpMappingListSourceIpMappingResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<VoiceV1SourceIpMapping>> sourceIpMappings() {
        return (Optional<List<VoiceV1SourceIpMapping>>) sourceIpMappings;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSourceIpMappingMeta> meta() {
        return (Optional<ListSourceIpMappingMeta>) meta;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListSourceIpMappingListSourceIpMappingResponse withSourceIpMappings(List<VoiceV1SourceIpMapping> sourceIpMappings) {
        Utils.checkNotNull(sourceIpMappings, "sourceIpMappings");
        this.sourceIpMappings = Optional.ofNullable(sourceIpMappings);
        return this;
    }

    public ListSourceIpMappingListSourceIpMappingResponse withSourceIpMappings(Optional<? extends List<VoiceV1SourceIpMapping>> sourceIpMappings) {
        Utils.checkNotNull(sourceIpMappings, "sourceIpMappings");
        this.sourceIpMappings = sourceIpMappings;
        return this;
    }

    public ListSourceIpMappingListSourceIpMappingResponse withMeta(ListSourceIpMappingMeta meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = Optional.ofNullable(meta);
        return this;
    }

    public ListSourceIpMappingListSourceIpMappingResponse withMeta(Optional<? extends ListSourceIpMappingMeta> meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSourceIpMappingListSourceIpMappingResponse other = (ListSourceIpMappingListSourceIpMappingResponse) o;
        return 
            Objects.deepEquals(this.sourceIpMappings, other.sourceIpMappings) &&
            Objects.deepEquals(this.meta, other.meta);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sourceIpMappings,
            meta);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSourceIpMappingListSourceIpMappingResponse.class,
                "sourceIpMappings", sourceIpMappings,
                "meta", meta);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<VoiceV1SourceIpMapping>> sourceIpMappings = Optional.empty();
 
        private Optional<? extends ListSourceIpMappingMeta> meta = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder sourceIpMappings(List<VoiceV1SourceIpMapping> sourceIpMappings) {
            Utils.checkNotNull(sourceIpMappings, "sourceIpMappings");
            this.sourceIpMappings = Optional.ofNullable(sourceIpMappings);
            return this;
        }

        public Builder sourceIpMappings(Optional<? extends List<VoiceV1SourceIpMapping>> sourceIpMappings) {
            Utils.checkNotNull(sourceIpMappings, "sourceIpMappings");
            this.sourceIpMappings = sourceIpMappings;
            return this;
        }

        public Builder meta(ListSourceIpMappingMeta meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = Optional.ofNullable(meta);
            return this;
        }

        public Builder meta(Optional<? extends ListSourceIpMappingMeta> meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }
        
        public ListSourceIpMappingListSourceIpMappingResponse build() {
            return new ListSourceIpMappingListSourceIpMappingResponse(
                sourceIpMappings,
                meta);
        }
    }
}

