/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class CreateIpRecordCreateIpRecordRequest {

    /**
     * An IP address in dotted decimal notation, IPv4 only.
     */
    @SpeakeasyMetadata("form:name=IpAddress")
    private String ipAddress;

    /**
     * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    private Optional<String> friendlyName;

    /**
     * An integer representing the length of the [CIDR](https://tools.ietf.org/html/rfc4632) prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.
     */
    @SpeakeasyMetadata("form:name=CidrPrefixLength")
    private Optional<Long> cidrPrefixLength;

    @JsonCreator
    public CreateIpRecordCreateIpRecordRequest(
            String ipAddress,
            Optional<String> friendlyName,
            Optional<Long> cidrPrefixLength) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        Utils.checkNotNull(friendlyName, "friendlyName");
        Utils.checkNotNull(cidrPrefixLength, "cidrPrefixLength");
        this.ipAddress = ipAddress;
        this.friendlyName = friendlyName;
        this.cidrPrefixLength = cidrPrefixLength;
    }
    
    public CreateIpRecordCreateIpRecordRequest(
            String ipAddress) {
        this(ipAddress, Optional.empty(), Optional.empty());
    }

    /**
     * An IP address in dotted decimal notation, IPv4 only.
     */
    @JsonIgnore
    public String ipAddress() {
        return ipAddress;
    }

    /**
     * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
     */
    @JsonIgnore
    public Optional<String> friendlyName() {
        return friendlyName;
    }

    /**
     * An integer representing the length of the [CIDR](https://tools.ietf.org/html/rfc4632) prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.
     */
    @JsonIgnore
    public Optional<Long> cidrPrefixLength() {
        return cidrPrefixLength;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An IP address in dotted decimal notation, IPv4 only.
     */
    public CreateIpRecordCreateIpRecordRequest withIpAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
     */
    public CreateIpRecordCreateIpRecordRequest withFriendlyName(String friendlyName) {
        Utils.checkNotNull(friendlyName, "friendlyName");
        this.friendlyName = Optional.ofNullable(friendlyName);
        return this;
    }

    /**
     * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
     */
    public CreateIpRecordCreateIpRecordRequest withFriendlyName(Optional<String> friendlyName) {
        Utils.checkNotNull(friendlyName, "friendlyName");
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * An integer representing the length of the [CIDR](https://tools.ietf.org/html/rfc4632) prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.
     */
    public CreateIpRecordCreateIpRecordRequest withCidrPrefixLength(long cidrPrefixLength) {
        Utils.checkNotNull(cidrPrefixLength, "cidrPrefixLength");
        this.cidrPrefixLength = Optional.ofNullable(cidrPrefixLength);
        return this;
    }

    /**
     * An integer representing the length of the [CIDR](https://tools.ietf.org/html/rfc4632) prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.
     */
    public CreateIpRecordCreateIpRecordRequest withCidrPrefixLength(Optional<Long> cidrPrefixLength) {
        Utils.checkNotNull(cidrPrefixLength, "cidrPrefixLength");
        this.cidrPrefixLength = cidrPrefixLength;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateIpRecordCreateIpRecordRequest other = (CreateIpRecordCreateIpRecordRequest) o;
        return 
            Objects.deepEquals(this.ipAddress, other.ipAddress) &&
            Objects.deepEquals(this.friendlyName, other.friendlyName) &&
            Objects.deepEquals(this.cidrPrefixLength, other.cidrPrefixLength);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ipAddress,
            friendlyName,
            cidrPrefixLength);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateIpRecordCreateIpRecordRequest.class,
                "ipAddress", ipAddress,
                "friendlyName", friendlyName,
                "cidrPrefixLength", cidrPrefixLength);
    }
    
    public final static class Builder {
 
        private String ipAddress;
 
        private Optional<String> friendlyName = Optional.empty();
 
        private Optional<Long> cidrPrefixLength = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An IP address in dotted decimal notation, IPv4 only.
         */
        public Builder ipAddress(String ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = ipAddress;
            return this;
        }

        /**
         * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
         */
        public Builder friendlyName(String friendlyName) {
            Utils.checkNotNull(friendlyName, "friendlyName");
            this.friendlyName = Optional.ofNullable(friendlyName);
            return this;
        }

        /**
         * A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long.
         */
        public Builder friendlyName(Optional<String> friendlyName) {
            Utils.checkNotNull(friendlyName, "friendlyName");
            this.friendlyName = friendlyName;
            return this;
        }

        /**
         * An integer representing the length of the [CIDR](https://tools.ietf.org/html/rfc4632) prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.
         */
        public Builder cidrPrefixLength(long cidrPrefixLength) {
            Utils.checkNotNull(cidrPrefixLength, "cidrPrefixLength");
            this.cidrPrefixLength = Optional.ofNullable(cidrPrefixLength);
            return this;
        }

        /**
         * An integer representing the length of the [CIDR](https://tools.ietf.org/html/rfc4632) prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.
         */
        public Builder cidrPrefixLength(Optional<Long> cidrPrefixLength) {
            Utils.checkNotNull(cidrPrefixLength, "cidrPrefixLength");
            this.cidrPrefixLength = cidrPrefixLength;
            return this;
        }
        
        public CreateIpRecordCreateIpRecordRequest build() {
            return new CreateIpRecordCreateIpRecordRequest(
                ipAddress,
                friendlyName,
                cidrPrefixLength);
        }
    }
}

