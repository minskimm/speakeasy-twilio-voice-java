/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ListDialingPermissionsCountryRequest {

    /**
     * Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=IsoCode")
    private Optional<String> isoCode;

    /**
     * Filter to retrieve the country permissions by specifying the continent
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Continent")
    private Optional<String> continent;

    /**
     * Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=CountryCode")
    private Optional<String> countryCode;

    /**
     * Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=LowRiskNumbersEnabled")
    private Optional<Boolean> lowRiskNumbersEnabled;

    /**
     * Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=HighRiskSpecialNumbersEnabled")
    private Optional<Boolean> highRiskSpecialNumbersEnabled;

    /**
     * Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/blog/how-to-protect-your-account-from-toll-fraud-with-voice-dialing-geo-permissions-html) numbers enabled. Can be: `true` or `false`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=HighRiskTollfraudNumbersEnabled")
    private Optional<Boolean> highRiskTollfraudNumbersEnabled;

    /**
     * How many resources to return in each list page. The default is 50, and the maximum is 1000.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=PageSize")
    private Optional<Long> pageSize;

    /**
     * The page index. This value is simply for client state.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Page")
    private Optional<Long> page;

    /**
     * The page token. This is provided by the API.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=PageToken")
    private Optional<String> pageToken;

    @JsonCreator
    public ListDialingPermissionsCountryRequest(
            Optional<String> isoCode,
            Optional<String> continent,
            Optional<String> countryCode,
            Optional<Boolean> lowRiskNumbersEnabled,
            Optional<Boolean> highRiskSpecialNumbersEnabled,
            Optional<Boolean> highRiskTollfraudNumbersEnabled,
            Optional<Long> pageSize,
            Optional<Long> page,
            Optional<String> pageToken) {
        Utils.checkNotNull(isoCode, "isoCode");
        Utils.checkNotNull(continent, "continent");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(lowRiskNumbersEnabled, "lowRiskNumbersEnabled");
        Utils.checkNotNull(highRiskSpecialNumbersEnabled, "highRiskSpecialNumbersEnabled");
        Utils.checkNotNull(highRiskTollfraudNumbersEnabled, "highRiskTollfraudNumbersEnabled");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageToken, "pageToken");
        this.isoCode = isoCode;
        this.continent = continent;
        this.countryCode = countryCode;
        this.lowRiskNumbersEnabled = lowRiskNumbersEnabled;
        this.highRiskSpecialNumbersEnabled = highRiskSpecialNumbersEnabled;
        this.highRiskTollfraudNumbersEnabled = highRiskTollfraudNumbersEnabled;
        this.pageSize = pageSize;
        this.page = page;
        this.pageToken = pageToken;
    }
    
    public ListDialingPermissionsCountryRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     */
    @JsonIgnore
    public Optional<String> isoCode() {
        return isoCode;
    }

    /**
     * Filter to retrieve the country permissions by specifying the continent
     */
    @JsonIgnore
    public Optional<String> continent() {
        return continent;
    }

    /**
     * Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)
     */
    @JsonIgnore
    public Optional<String> countryCode() {
        return countryCode;
    }

    /**
     * Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`.
     */
    @JsonIgnore
    public Optional<Boolean> lowRiskNumbersEnabled() {
        return lowRiskNumbersEnabled;
    }

    /**
     * Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`
     */
    @JsonIgnore
    public Optional<Boolean> highRiskSpecialNumbersEnabled() {
        return highRiskSpecialNumbersEnabled;
    }

    /**
     * Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/blog/how-to-protect-your-account-from-toll-fraud-with-voice-dialing-geo-permissions-html) numbers enabled. Can be: `true` or `false`.
     */
    @JsonIgnore
    public Optional<Boolean> highRiskTollfraudNumbersEnabled() {
        return highRiskTollfraudNumbersEnabled;
    }

    /**
     * How many resources to return in each list page. The default is 50, and the maximum is 1000.
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * The page index. This value is simply for client state.
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * The page token. This is provided by the API.
     */
    @JsonIgnore
    public Optional<String> pageToken() {
        return pageToken;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     */
    public ListDialingPermissionsCountryRequest withIsoCode(String isoCode) {
        Utils.checkNotNull(isoCode, "isoCode");
        this.isoCode = Optional.ofNullable(isoCode);
        return this;
    }

    /**
     * Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     */
    public ListDialingPermissionsCountryRequest withIsoCode(Optional<String> isoCode) {
        Utils.checkNotNull(isoCode, "isoCode");
        this.isoCode = isoCode;
        return this;
    }

    /**
     * Filter to retrieve the country permissions by specifying the continent
     */
    public ListDialingPermissionsCountryRequest withContinent(String continent) {
        Utils.checkNotNull(continent, "continent");
        this.continent = Optional.ofNullable(continent);
        return this;
    }

    /**
     * Filter to retrieve the country permissions by specifying the continent
     */
    public ListDialingPermissionsCountryRequest withContinent(Optional<String> continent) {
        Utils.checkNotNull(continent, "continent");
        this.continent = continent;
        return this;
    }

    /**
     * Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)
     */
    public ListDialingPermissionsCountryRequest withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }

    /**
     * Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)
     */
    public ListDialingPermissionsCountryRequest withCountryCode(Optional<String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`.
     */
    public ListDialingPermissionsCountryRequest withLowRiskNumbersEnabled(boolean lowRiskNumbersEnabled) {
        Utils.checkNotNull(lowRiskNumbersEnabled, "lowRiskNumbersEnabled");
        this.lowRiskNumbersEnabled = Optional.ofNullable(lowRiskNumbersEnabled);
        return this;
    }

    /**
     * Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`.
     */
    public ListDialingPermissionsCountryRequest withLowRiskNumbersEnabled(Optional<Boolean> lowRiskNumbersEnabled) {
        Utils.checkNotNull(lowRiskNumbersEnabled, "lowRiskNumbersEnabled");
        this.lowRiskNumbersEnabled = lowRiskNumbersEnabled;
        return this;
    }

    /**
     * Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`
     */
    public ListDialingPermissionsCountryRequest withHighRiskSpecialNumbersEnabled(boolean highRiskSpecialNumbersEnabled) {
        Utils.checkNotNull(highRiskSpecialNumbersEnabled, "highRiskSpecialNumbersEnabled");
        this.highRiskSpecialNumbersEnabled = Optional.ofNullable(highRiskSpecialNumbersEnabled);
        return this;
    }

    /**
     * Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`
     */
    public ListDialingPermissionsCountryRequest withHighRiskSpecialNumbersEnabled(Optional<Boolean> highRiskSpecialNumbersEnabled) {
        Utils.checkNotNull(highRiskSpecialNumbersEnabled, "highRiskSpecialNumbersEnabled");
        this.highRiskSpecialNumbersEnabled = highRiskSpecialNumbersEnabled;
        return this;
    }

    /**
     * Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/blog/how-to-protect-your-account-from-toll-fraud-with-voice-dialing-geo-permissions-html) numbers enabled. Can be: `true` or `false`.
     */
    public ListDialingPermissionsCountryRequest withHighRiskTollfraudNumbersEnabled(boolean highRiskTollfraudNumbersEnabled) {
        Utils.checkNotNull(highRiskTollfraudNumbersEnabled, "highRiskTollfraudNumbersEnabled");
        this.highRiskTollfraudNumbersEnabled = Optional.ofNullable(highRiskTollfraudNumbersEnabled);
        return this;
    }

    /**
     * Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/blog/how-to-protect-your-account-from-toll-fraud-with-voice-dialing-geo-permissions-html) numbers enabled. Can be: `true` or `false`.
     */
    public ListDialingPermissionsCountryRequest withHighRiskTollfraudNumbersEnabled(Optional<Boolean> highRiskTollfraudNumbersEnabled) {
        Utils.checkNotNull(highRiskTollfraudNumbersEnabled, "highRiskTollfraudNumbersEnabled");
        this.highRiskTollfraudNumbersEnabled = highRiskTollfraudNumbersEnabled;
        return this;
    }

    /**
     * How many resources to return in each list page. The default is 50, and the maximum is 1000.
     */
    public ListDialingPermissionsCountryRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * How many resources to return in each list page. The default is 50, and the maximum is 1000.
     */
    public ListDialingPermissionsCountryRequest withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * The page index. This value is simply for client state.
     */
    public ListDialingPermissionsCountryRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * The page index. This value is simply for client state.
     */
    public ListDialingPermissionsCountryRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * The page token. This is provided by the API.
     */
    public ListDialingPermissionsCountryRequest withPageToken(String pageToken) {
        Utils.checkNotNull(pageToken, "pageToken");
        this.pageToken = Optional.ofNullable(pageToken);
        return this;
    }

    /**
     * The page token. This is provided by the API.
     */
    public ListDialingPermissionsCountryRequest withPageToken(Optional<String> pageToken) {
        Utils.checkNotNull(pageToken, "pageToken");
        this.pageToken = pageToken;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListDialingPermissionsCountryRequest other = (ListDialingPermissionsCountryRequest) o;
        return 
            Objects.deepEquals(this.isoCode, other.isoCode) &&
            Objects.deepEquals(this.continent, other.continent) &&
            Objects.deepEquals(this.countryCode, other.countryCode) &&
            Objects.deepEquals(this.lowRiskNumbersEnabled, other.lowRiskNumbersEnabled) &&
            Objects.deepEquals(this.highRiskSpecialNumbersEnabled, other.highRiskSpecialNumbersEnabled) &&
            Objects.deepEquals(this.highRiskTollfraudNumbersEnabled, other.highRiskTollfraudNumbersEnabled) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.pageToken, other.pageToken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isoCode,
            continent,
            countryCode,
            lowRiskNumbersEnabled,
            highRiskSpecialNumbersEnabled,
            highRiskTollfraudNumbersEnabled,
            pageSize,
            page,
            pageToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListDialingPermissionsCountryRequest.class,
                "isoCode", isoCode,
                "continent", continent,
                "countryCode", countryCode,
                "lowRiskNumbersEnabled", lowRiskNumbersEnabled,
                "highRiskSpecialNumbersEnabled", highRiskSpecialNumbersEnabled,
                "highRiskTollfraudNumbersEnabled", highRiskTollfraudNumbersEnabled,
                "pageSize", pageSize,
                "page", page,
                "pageToken", pageToken);
    }
    
    public final static class Builder {
 
        private Optional<String> isoCode = Optional.empty();
 
        private Optional<String> continent = Optional.empty();
 
        private Optional<String> countryCode = Optional.empty();
 
        private Optional<Boolean> lowRiskNumbersEnabled = Optional.empty();
 
        private Optional<Boolean> highRiskSpecialNumbersEnabled = Optional.empty();
 
        private Optional<Boolean> highRiskTollfraudNumbersEnabled = Optional.empty();
 
        private Optional<Long> pageSize = Optional.empty();
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<String> pageToken = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
         */
        public Builder isoCode(String isoCode) {
            Utils.checkNotNull(isoCode, "isoCode");
            this.isoCode = Optional.ofNullable(isoCode);
            return this;
        }

        /**
         * Filter to retrieve the country permissions by specifying the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
         */
        public Builder isoCode(Optional<String> isoCode) {
            Utils.checkNotNull(isoCode, "isoCode");
            this.isoCode = isoCode;
            return this;
        }

        /**
         * Filter to retrieve the country permissions by specifying the continent
         */
        public Builder continent(String continent) {
            Utils.checkNotNull(continent, "continent");
            this.continent = Optional.ofNullable(continent);
            return this;
        }

        /**
         * Filter to retrieve the country permissions by specifying the continent
         */
        public Builder continent(Optional<String> continent) {
            Utils.checkNotNull(continent, "continent");
            this.continent = continent;
            return this;
        }

        /**
         * Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)
         */
        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        /**
         * Filter the results by specified [country codes](https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html)
         */
        public Builder countryCode(Optional<String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        /**
         * Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`.
         */
        public Builder lowRiskNumbersEnabled(boolean lowRiskNumbersEnabled) {
            Utils.checkNotNull(lowRiskNumbersEnabled, "lowRiskNumbersEnabled");
            this.lowRiskNumbersEnabled = Optional.ofNullable(lowRiskNumbersEnabled);
            return this;
        }

        /**
         * Filter to retrieve the country permissions with dialing to low-risk numbers enabled. Can be: `true` or `false`.
         */
        public Builder lowRiskNumbersEnabled(Optional<Boolean> lowRiskNumbersEnabled) {
            Utils.checkNotNull(lowRiskNumbersEnabled, "lowRiskNumbersEnabled");
            this.lowRiskNumbersEnabled = lowRiskNumbersEnabled;
            return this;
        }

        /**
         * Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`
         */
        public Builder highRiskSpecialNumbersEnabled(boolean highRiskSpecialNumbersEnabled) {
            Utils.checkNotNull(highRiskSpecialNumbersEnabled, "highRiskSpecialNumbersEnabled");
            this.highRiskSpecialNumbersEnabled = Optional.ofNullable(highRiskSpecialNumbersEnabled);
            return this;
        }

        /**
         * Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled. Can be: `true` or `false`
         */
        public Builder highRiskSpecialNumbersEnabled(Optional<Boolean> highRiskSpecialNumbersEnabled) {
            Utils.checkNotNull(highRiskSpecialNumbersEnabled, "highRiskSpecialNumbersEnabled");
            this.highRiskSpecialNumbersEnabled = highRiskSpecialNumbersEnabled;
            return this;
        }

        /**
         * Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/blog/how-to-protect-your-account-from-toll-fraud-with-voice-dialing-geo-permissions-html) numbers enabled. Can be: `true` or `false`.
         */
        public Builder highRiskTollfraudNumbersEnabled(boolean highRiskTollfraudNumbersEnabled) {
            Utils.checkNotNull(highRiskTollfraudNumbersEnabled, "highRiskTollfraudNumbersEnabled");
            this.highRiskTollfraudNumbersEnabled = Optional.ofNullable(highRiskTollfraudNumbersEnabled);
            return this;
        }

        /**
         * Filter to retrieve the country permissions with dialing to high-risk [toll fraud](https://www.twilio.com/blog/how-to-protect-your-account-from-toll-fraud-with-voice-dialing-geo-permissions-html) numbers enabled. Can be: `true` or `false`.
         */
        public Builder highRiskTollfraudNumbersEnabled(Optional<Boolean> highRiskTollfraudNumbersEnabled) {
            Utils.checkNotNull(highRiskTollfraudNumbersEnabled, "highRiskTollfraudNumbersEnabled");
            this.highRiskTollfraudNumbersEnabled = highRiskTollfraudNumbersEnabled;
            return this;
        }

        /**
         * How many resources to return in each list page. The default is 50, and the maximum is 1000.
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * How many resources to return in each list page. The default is 50, and the maximum is 1000.
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * The page index. This value is simply for client state.
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * The page index. This value is simply for client state.
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * The page token. This is provided by the API.
         */
        public Builder pageToken(String pageToken) {
            Utils.checkNotNull(pageToken, "pageToken");
            this.pageToken = Optional.ofNullable(pageToken);
            return this;
        }

        /**
         * The page token. This is provided by the API.
         */
        public Builder pageToken(Optional<String> pageToken) {
            Utils.checkNotNull(pageToken, "pageToken");
            this.pageToken = pageToken;
            return this;
        }
        
        public ListDialingPermissionsCountryRequest build() {
            return new ListDialingPermissionsCountryRequest(
                isoCode,
                continent,
                countryCode,
                lowRiskNumbersEnabled,
                highRiskSpecialNumbersEnabled,
                highRiskTollfraudNumbersEnabled,
                pageSize,
                page,
                pageToken);
        }
    }
}

