/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.components.VoiceV1IpRecord;
import org.openapis.openapi.utils.Utils;

/**
 * ListIpRecordListIpRecordResponse - OK
 */

public class ListIpRecordListIpRecordResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_records")
    private Optional<? extends List<VoiceV1IpRecord>> ipRecords;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    private Optional<? extends ListIpRecordMeta> meta;

    @JsonCreator
    public ListIpRecordListIpRecordResponse(
            @JsonProperty("ip_records") Optional<? extends List<VoiceV1IpRecord>> ipRecords,
            @JsonProperty("meta") Optional<? extends ListIpRecordMeta> meta) {
        Utils.checkNotNull(ipRecords, "ipRecords");
        Utils.checkNotNull(meta, "meta");
        this.ipRecords = ipRecords;
        this.meta = meta;
    }
    
    public ListIpRecordListIpRecordResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<VoiceV1IpRecord>> ipRecords() {
        return (Optional<List<VoiceV1IpRecord>>) ipRecords;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListIpRecordMeta> meta() {
        return (Optional<ListIpRecordMeta>) meta;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListIpRecordListIpRecordResponse withIpRecords(List<VoiceV1IpRecord> ipRecords) {
        Utils.checkNotNull(ipRecords, "ipRecords");
        this.ipRecords = Optional.ofNullable(ipRecords);
        return this;
    }

    public ListIpRecordListIpRecordResponse withIpRecords(Optional<? extends List<VoiceV1IpRecord>> ipRecords) {
        Utils.checkNotNull(ipRecords, "ipRecords");
        this.ipRecords = ipRecords;
        return this;
    }

    public ListIpRecordListIpRecordResponse withMeta(ListIpRecordMeta meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = Optional.ofNullable(meta);
        return this;
    }

    public ListIpRecordListIpRecordResponse withMeta(Optional<? extends ListIpRecordMeta> meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListIpRecordListIpRecordResponse other = (ListIpRecordListIpRecordResponse) o;
        return 
            Objects.deepEquals(this.ipRecords, other.ipRecords) &&
            Objects.deepEquals(this.meta, other.meta);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ipRecords,
            meta);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListIpRecordListIpRecordResponse.class,
                "ipRecords", ipRecords,
                "meta", meta);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<VoiceV1IpRecord>> ipRecords = Optional.empty();
 
        private Optional<? extends ListIpRecordMeta> meta = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ipRecords(List<VoiceV1IpRecord> ipRecords) {
            Utils.checkNotNull(ipRecords, "ipRecords");
            this.ipRecords = Optional.ofNullable(ipRecords);
            return this;
        }

        public Builder ipRecords(Optional<? extends List<VoiceV1IpRecord>> ipRecords) {
            Utils.checkNotNull(ipRecords, "ipRecords");
            this.ipRecords = ipRecords;
            return this;
        }

        public Builder meta(ListIpRecordMeta meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = Optional.ofNullable(meta);
            return this;
        }

        public Builder meta(Optional<? extends ListIpRecordMeta> meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }
        
        public ListIpRecordListIpRecordResponse build() {
            return new ListIpRecordListIpRecordResponse(
                ipRecords,
                meta);
        }
    }
}

