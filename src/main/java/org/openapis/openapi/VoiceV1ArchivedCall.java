/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.io.InputStream;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.operations.DeleteArchivedCallRequest;
import org.openapis.openapi.models.operations.DeleteArchivedCallRequestBuilder;
import org.openapis.openapi.models.operations.DeleteArchivedCallResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.Utils; 

public class VoiceV1ArchivedCall implements
            MethodCallDeleteArchivedCall {
    
    /**
     * DELETE_ARCHIVED_CALL_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] DELETE_ARCHIVED_CALL_SERVERS = {
        "https://voice.twilio.com",
    };

    private final SDKConfiguration sdkConfiguration;

    VoiceV1ArchivedCall(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API.
     * @return The call builder
     */
    public DeleteArchivedCallRequestBuilder deleteArchivedCall() {
        return new DeleteArchivedCallRequestBuilder(this);
    }

    /**
     * Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API.
     * @param date The date of the Call in UTC.
     * @param sid The Twilio-provided Call SID that uniquely identifies the Call resource to delete
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteArchivedCallResponse deleteArchivedCall(
            LocalDate date,
            String sid) throws Exception {
        return deleteArchivedCall(date, sid, Optional.empty());
    }
    
    /**
     * Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API.
     * @param date The date of the Call in UTC.
     * @param sid The Twilio-provided Call SID that uniquely identifies the Call resource to delete
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteArchivedCallResponse deleteArchivedCall(
            LocalDate date,
            String sid,
            Optional<String> serverURL) throws Exception {
        DeleteArchivedCallRequest request =
            DeleteArchivedCallRequest
                .builder()
                .date(date)
                .sid(sid)
                .build();
        
        String _baseUrl = Utils.templateUrl(DELETE_ARCHIVED_CALL_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                DeleteArchivedCallRequest.class,
                _baseUrl,
                "/v1/Archives/{Date}/Calls/{Sid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "DeleteArchivedCall", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "DeleteArchivedCall",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "DeleteArchivedCall",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "DeleteArchivedCall",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteArchivedCallResponse.Builder _resBuilder = 
            DeleteArchivedCallResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteArchivedCallResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
